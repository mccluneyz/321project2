@model IEnumerable<RecycleRank.Models.Bin>
@{
    ViewData["Title"] = "Recycling Map";
}

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <style>
        #map {
            height: 600px;
            width: 100%;
            border-radius: 0.5rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .map-container {
            position: relative;
        }
    </style>
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <!-- Navigation -->
            <div class="page-navigation mb-4">
                <a href="/Home/Index" class="btn btn-outline-primary">
                    <span>üè†</span> Home
                </a>
                <a href="/Recycling/Index" class="btn btn-outline-success">
                    <span>‚ôªÔ∏è</span> Log Activity
                </a>
                <a href="/Leaderboard/Index" class="btn btn-outline-warning">
                    <span>üèÜ</span> Leaderboard
                </a>
                <a href="/Admin/Index" class="btn btn-outline-secondary">
                    <span>‚öôÔ∏è</span> Admin
                </a>
            </div>
            
            <h1 class="mb-4">üó∫Ô∏è Recycling Bin Map</h1>
            <div class="card shadow">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">Find Recycling Bins Near You</h5>
                </div>
                <div class="card-body">
                    <div class="map-container mb-4">
                        <div id="map"></div>
                    </div>
                    
                    @if (Model != null && Model.Any())
                    {
                        <div class="row">
                            @foreach (var bin in Model)
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card h-100">
                                        <div class="card-body">
                                            <h6 class="card-title">@bin.Name</h6>
                                            <p class="card-text">
                                                <small class="text-muted">@bin.Address</small><br>
                                                <small>üìç @bin.Latitude, @bin.Longitude</small>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <strong>No bins found!</strong> Please add recycling bins through the Admin panel.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script>
        // UA Campus GeoJSON Data
        const uaGeoJson = {
        "type": "FeatureCollection",
        "name": "UA Campus Key Landmarks and Boundary",
        "crs": {
            "type": "name",
            "properties": {
                "name": "urn:ogc:def:crs:OGC:1.3:CRS84"
            }
        },
        "features": [
            {
                "type": "Feature",
                "properties": {
                    "name": "The Quad (Campus Center)",
                    "type": "Landmark",
                    "description": "The historical and geographical heart of the campus, featuring Denny Chimes."
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [-87.5487, 33.2119]
                }
            },
            {
                "type": "Feature",
                "properties": {
                    "name": "Bryant-Denny Stadium",
                    "type": "Athletics",
                    "description": "Home of the Crimson Tide Football team."
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [-87.5501, 33.2084]
                }
            },
            {
                "type": "Feature",
                "properties": {
                    "name": "Gorgas Library",
                    "type": "Academic",
                    "description": "The main library on campus."
                },
                "geometry": {
                    "type": "Point",
                    "coordinates": [-87.5473, 33.2132]
                }
            },
            {
                "type": "Feature",
                "properties": {
                    "name": "Main Campus Area Boundary (Approximate)",
                    "type": "Boundary",
                    "description": "A very rough polygon outlining the central campus block."
                },
                "geometry": {
                    "type": "Polygon",
                    "coordinates": [
                        [
                            [-87.5540, 33.2160],
                            [-87.5400, 33.2160],
                            [-87.5400, 33.2070],
                            [-87.5540, 33.2070],
                            [-87.5540, 33.2160]
                        ]
                    ]
                }
            }
        ]
    };

    // Initialize Map centered on The Quad
    const map = L.map('map').setView([33.2119, -87.5487], 15);

    // Add Tile Layer (OpenStreetMap)
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    // Function to style GeoJSON features
    function style(feature) {
        if (feature.geometry.type === 'Polygon') {
            return {
                fillColor: '#28a745',
                weight: 2,
                opacity: 0.6,
                color: '#155724',
                fillOpacity: 0.1
            };
        }
        return {};
    }

    // Function to add popups on point markers
    function onEachFeature(feature, layer) {
        if (feature.properties && feature.properties.name) {
            let popupContent = `<div class="fw-bold text-success">${feature.properties.name}</div>`;
            if (feature.properties.description) {
                popupContent += `<p class="mb-0 small">${feature.properties.description}</p>`;
            }
            layer.bindPopup(popupContent);
        }
    }

    // Add UA Campus GeoJSON data to the map
    L.geoJSON(uaGeoJson, {
        style: style,
        pointToLayer: function (feature, latlng) {
            // Custom marker styling for campus landmarks
            return L.circleMarker(latlng, {
                radius: 8,
                fillColor: "#28a745",
                color: "#155724",
                weight: 2,
                opacity: 1,
                fillOpacity: 0.8
            });
        },
        onEachFeature: onEachFeature
    }).addTo(map);

    // Add recycling bins from the model
    @if (Model != null && Model.Any())
    {
        foreach (var bin in Model)
        {
            <text>
            L.marker([@bin.Latitude, @bin.Longitude])
                .addTo(map)
                .bindPopup('<div class="fw-bold text-primary">@Html.Raw(bin.Name)</div><p class="mb-0 small">@Html.Raw(bin.Address)</p>');
            </text>
        }
    }
    </script>
}
